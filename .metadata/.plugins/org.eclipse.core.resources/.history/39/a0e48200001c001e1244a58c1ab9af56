package it.tripagency_capstone_epicode.repository;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import java.time.LocalDate;
import java.util.List;

import it.tripagency_capstone_epicode.entity.Prenotazione;
import it.tripagency_capstone_epicode.entity.User;

public interface PrenotazioneRepository {

    List<Prenotazione> findByDataInizioBetween(LocalDate startDate, LocalDate endDate);

    List<Prenotazione> findByDataFineBetween(LocalDate startDate, LocalDate endDate);

    List<Prenotazione> findByUtente(User user);

    Prenotazione save(Prenotazione prenotazione);

    void delete(Prenotazione prenotazione);
}

class PrenotazioneRepositoryImpl implements PrenotazioneRepository {

    @PersistenceContext
    private EntityManager entityManager;

    @Override
    public List<Prenotazione> findByDataInizioBetween(LocalDate startDate, LocalDate endDate) {
        TypedQuery<Prenotazione> query = entityManager.createQuery(
                "SELECT p FROM Prenotazione p WHERE p.dataInizio BETWEEN :startDate AND :endDate",
                Prenotazione.class
        );
        query.setParameter("startDate", startDate);
        query.setParameter("endDate", endDate);
        return query.getResultList();
    }

    @Override
    public List<Prenotazione> findByDataFineBetween(LocalDate startDate, LocalDate endDate) {
        TypedQuery<Prenotazione> query = entityManager.createQuery(
                "SELECT p FROM Prenotazione p WHERE p.dataFine BETWEEN :startDate AND :endDate",
                Prenotazione.class
        );
        query.setParameter("startDate", startDate);
        query.setParameter("endDate", endDate);
        return query.getResultList();
    }

    @Override
    public List<Prenotazione> findByUtente(User user) {
        TypedQuery<Prenotazione> query = entityManager.createQuery(
                "SELECT p FROM Prenotazione p WHERE p.user = :user",
                Prenotazione.class
        );
        query.setParameter("user", user);
        return query.getResultList();
    }

    @Override
    public void save(Prenotazione prenotazione) {
        entityManager.persist(prenotazione);
    }

    @Override
    public void delete(Prenotazione prenotazione) {
        entityManager.remove(entityManager.merge(prenotazione));
    }
}
