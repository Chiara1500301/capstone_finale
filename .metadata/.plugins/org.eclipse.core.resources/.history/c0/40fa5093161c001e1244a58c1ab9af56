package it.tripagency_capstone_epicode.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import it.tripagency_capstone_epicode.entity.Destinazioni;
import it.tripagency_capstone_epicode.entity.Pacchetto;
import it.tripagency_capstone_epicode.services.PacchettoService;

@RestController
@RequestMapping("/pacchetto")
public class PacchettoController {

    private final PacchettoService pacchettoService;

    @Autowired
    public PacchettoController(PacchettoService pacchettoService) {
        this.pacchettoService = pacchettoService;
    }

    @PostMapping
    public ResponseEntity<Pacchetto> createPacchetto(@RequestBody Pacchetto pacchetto) {
        Pacchetto createdPacchetto = pacchettoService.createPacchetto(pacchetto);
        return new ResponseEntity<>(createdPacchetto, HttpStatus.CREATED);
    }

    @GetMapping("/{destinazione}")
    public ResponseEntity<Pacchetto> getPacchettoById(@PathVariable Destinazioni destinazione) {
        Pacchetto pacchetto = pacchettoService.getPacchettoByDestinazioni(destinazione);
        if (pacchetto != null) {
            return new ResponseEntity<>(pacchetto, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PutMapping("/{destinazioni}")
    public ResponseEntity<Pacchetto> updatePacchetto(@PathVariable Destinazioni destinazione, @RequestBody Pacchetto pacchetto) {
        Pacchetto updatedPacchetto = pacchettoService.updatePacchetto(destinazione, pacchetto);
        if (updatedPacchetto != null) {
            return new ResponseEntity<>(updatedPacchetto, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePacchetto(@PathVariable Long id) {
        pacchettoService.deletePacchetto(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}

